# =============================================================================
# TEMPLATES ANSIBLE - GITLAB CI/CD
# =============================================================================
# Description : Templates sp√©cialis√©s pour l'automatisation Ansible
# Version     : 1.0.0
# =============================================================================

# =============================================================================
# TEMPLATE DE BASE ANSIBLE
# =============================================================================

.ansible_base:
  image: cytopia/ansible:latest
  extends:
    - .base_deploy
    - .error_handling
  variables:
    ANSIBLE_FORCE_COLOR: "True"
    ANSIBLE_HOST_KEY_CHECKING: "False"
    ANSIBLE_STDOUT_CALLBACK: "yaml"
    ANSIBLE_GATHER_FACTS: "True"
  before_script:
    - echo "üîß Pr√©paration environnement Ansible..."
    - apk add --no-cache jq curl bash
    - ansible --version
    - echo "üìÅ R√©pertoire de travail: $(pwd)"
    - echo "üìã Inventaires disponibles:"
    - ls -la ${ANSIBLE_DIR}/inventory/ 2>/dev/null || echo "   Aucun inventaire trouv√©"

# =============================================================================
# VALIDATION INVENTAIRE ANSIBLE
# =============================================================================

.ansible_validate_inventory:
  extends: .ansible_base
  script:
    - |
      echo "üîç Validation de l'inventaire Ansible pour $ENV..."
      
      inventory_file="${ANSIBLE_DIR}/inventory/${ENV}"
      
      if [ ! -f "$inventory_file" ]; then
        echo "‚ùå Inventaire $ENV non trouv√©: $inventory_file"
        echo "üìã Inventaires disponibles:"
        ls -la "${ANSIBLE_DIR}/inventory/" 2>/dev/null || echo "   R√©pertoire inventory vide"
        exit 1
      fi
      
      echo "‚úÖ Inventaire trouv√©: $inventory_file"
      echo "üìÑ Contenu de l'inventaire:"
      echo "----------------------------------------"
      cat "$inventory_file"
      echo "----------------------------------------"
      
      # Validation syntaxique avec ansible-inventory
      if command -v ansible-inventory >/dev/null 2>&1; then
        echo "üîç Validation syntaxique de l'inventaire..."
        ansible-inventory -i "$inventory_file" --list >/dev/null
        if [ $? -eq 0 ]; then
          echo "‚úÖ Syntaxe de l'inventaire valid√©e"
        else
          echo "‚ùå Erreur de syntaxe dans l'inventaire"
          exit 1
        fi
      else
        echo "‚ö†Ô∏è  ansible-inventory non disponible, validation syntaxique ignor√©e"
      fi

# =============================================================================
# TEST DE CONNECTIVIT√â ANSIBLE
# =============================================================================

.ansible_connectivity_test:
  extends: .ansible_base
  script:
    - |
      echo "üåê Test de connectivit√© Ansible vers $ENV..."
      
      inventory_file="${ANSIBLE_DIR}/inventory/${ENV}"
      
      if [ ! -f "$inventory_file" ]; then
        echo "‚ùå Inventaire non trouv√© pour test de connectivit√©"
        exit 1
      fi
      
      # Test ping Ansible
      echo "üèì Test ping Ansible..."
      ansible all -i "$inventory_file" -m ping --timeout=30
      ping_result=$?
      
      if [ $ping_result -eq 0 ]; then
        echo "‚úÖ Connectivit√© Ansible r√©ussie"
      else
        echo "‚ö†Ô∏è  Test ping Ansible √©chou√© (code: $ping_result)"
        echo "   Cela peut √™tre normal si les serveurs sont inaccessibles"
        echo "   ou si les cl√©s SSH ne sont pas configur√©es"
      fi
      
      # Test de collecte des facts (plus informatif)
      echo "üìä Test de collecte des informations syst√®me..."
      ansible all -i "$inventory_file" -m gather_facts --timeout=30 || echo "‚ö†Ô∏è  Collecte des facts √©chou√©e"

# =============================================================================
# EX√âCUTION DE PLAYBOOKS
# =============================================================================

.ansible_run_playbook:
  extends: .ansible_base
  variables:
    PLAYBOOK_PATH: ""
    ANSIBLE_EXTRA_VARS: ""
    CHECK_MODE: "false"
  script:
    - |
      echo "üöÄ Ex√©cution du playbook Ansible..."
      
      if [ -z "$PLAYBOOK_PATH" ]; then
        echo "‚ùå Variable PLAYBOOK_PATH non d√©finie"
        exit 1
      fi
      
      inventory_file="${ANSIBLE_DIR}/inventory/${ENV}"
      playbook_file="${ANSIBLE_DIR}/${PLAYBOOK_PATH}"
      
      echo "üìã Configuration:"
      echo "   Inventaire: $inventory_file"
      echo "   Playbook: $playbook_file"
      echo "   Environment: $ENV"
      echo "   Check mode: $CHECK_MODE"
      
      if [ ! -f "$playbook_file" ]; then
        echo "‚ùå Playbook non trouv√©: $playbook_file"
        echo "üìã Playbooks disponibles:"
        find "${ANSIBLE_DIR}" -name "*.yml" -type f | head -10
        exit 1
      fi
      
      # Construction de la commande ansible-playbook
      cmd="ansible-playbook -i $inventory_file $playbook_file"
      
      if [ "$CHECK_MODE" = "true" ]; then
        cmd="$cmd --check --diff"
        echo "üîç Mode check activ√© (simulation)"
      fi
      
      if [ ! -z "$ANSIBLE_EXTRA_VARS" ]; then
        cmd="$cmd --extra-vars '$ANSIBLE_EXTRA_VARS'"
        echo "üìù Variables suppl√©mentaires: $ANSIBLE_EXTRA_VARS"
      fi
      
      echo "‚ñ∂Ô∏è  Commande ex√©cut√©e: $cmd"
      echo "----------------------------------------"
      
      # Ex√©cution du playbook
      eval $cmd
      result=$?
      
      echo "----------------------------------------"
      if [ $result -eq 0 ]; then
        echo "‚úÖ Playbook ex√©cut√© avec succ√®s"
      else
        echo "‚ùå √âchec du playbook (code: $result)"
        exit $result
      fi

# =============================================================================
# TEMPLATES SP√âCIALIS√âS PAR TYPE DE D√âPLOIEMENT
# =============================================================================

.ansible_deploy_dev:
  extends: 
    - .ansible_run_playbook
    - .rules_manual_dev
  variables:
    ENV: dev
    CHECK_MODE: "true"  # Mode check par d√©faut en dev

.ansible_deploy_prod:
  extends: 
    - .ansible_run_playbook
    - .rules_manual_prod
  variables:
    ENV: prod
    CHECK_MODE: "false"  # Mode r√©el en production
  environment:
    name: production
    action: start
  before_script:
    - !reference [.ansible_base, before_script]
    - !reference [.validate_branch_prod, script]

# =============================================================================
# TEMPLATES DE MAINTENANCE
# =============================================================================

.ansible_maintenance:
  extends: .ansible_base
  stage: cleanup
  variables:
    MAINTENANCE_TYPE: ""
  script:
    - |
      echo "üîß Op√©ration de maintenance Ansible: $MAINTENANCE_TYPE..."
      
      case "$MAINTENANCE_TYPE" in
        "clean_logs")
          echo "üßπ Nettoyage des logs Ansible..."
          find "${ANSIBLE_DIR}" -name "*.log" -type f -mtime +7 -delete || true
          ;;
        "update_cache")
          echo "üîÑ Mise √† jour du cache Ansible..."
          # Logique de mise √† jour du cache si n√©cessaire
          ;;
        *)
          echo "‚ö†Ô∏è  Type de maintenance non reconnu: $MAINTENANCE_TYPE"
          ;;
      esac
      
      echo "‚úÖ Maintenance Ansible termin√©e"