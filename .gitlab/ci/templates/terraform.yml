# =============================================================================
# TEMPLATES TERRAFORM - GITLAB CI/CD (VERSION CORRIGÃ‰E)
# =============================================================================
# Description : Templates spÃ©cialisÃ©s Terraform avec gestion d'erreurs amÃ©liorÃ©e
# Version     : 3.1.0 - Correction validation artefacts et dÃ©pendances
# =============================================================================

# =============================================================================
# INSTALLATION TERRAFORM OPTIMISÃ‰E
# =============================================================================

.terraform_install:
  script: &terraform_install_script
    - apk add --no-cache bash curl unzip
    - chmod +x .gitlab/scripts/terraform/install-terraform.sh
    - .gitlab/scripts/terraform/install-terraform.sh "${TF_VERSION}"

# =============================================================================
# TEMPLATES DE BASE TERRAFORM
# =============================================================================

.terraform_base:
  image: alpine:latest
  extends:
    - .error_handling
  variables:
    TF_IN_AUTOMATION: "true"
    TF_INPUT: "false"
    TF_CLI_ARGS: "-no-color"
  before_script: 
    - *terraform_install_script

# =============================================================================
# DIAGNOSTIC PRÃ‰REQUIS (NOUVEAU)
# =============================================================================

.terraform_diagnose:
  script: &terraform_diagnose_script
    - chmod +x .gitlab/scripts/utils/diagnose-pipeline.sh
    - .gitlab/scripts/utils/diagnose-pipeline.sh "$ENV"

# =============================================================================
# TEMPLATES SPÃ‰CIALISÃ‰S PAR STAGE
# =============================================================================

.terraform_validate:
  extends: 
    - .terraform_base
    - .base_validate
  script:
    - chmod +x .gitlab/scripts/terraform/validate-syntax.sh
    - .gitlab/scripts/terraform/validate-syntax.sh "${ENV:-all}"

.terraform_plan:
  extends: 
    - .terraform_base
    - .base_plan
  variables:
    PLAN_FILE: "tfplan"
  script:
    - chmod +x .gitlab/scripts/terraform/plan-environment.sh
    - .gitlab/scripts/terraform/plan-environment.sh "$ENV"
  artifacts:
    paths:
      - ${TF_ROOT}/${ENV}/${PLAN_FILE}
      - ${TF_ROOT}/${ENV}/plan_status.env
      - ${TF_ROOT}/${ENV}/plan_output.txt
    reports:
      dotenv: ${TF_ROOT}/${ENV}/plan_status.env
    expire_in: 1 week
    when: always

.terraform_apply:
  extends: 
    - .terraform_base
    - .base_apply
  variables:
    PLAN_FILE: "tfplan"
  before_script: 
    - !reference [.terraform_install, script] 
    - !reference [.terraform_diagnose, script]
  script:
    - chmod +x .gitlab/scripts/terraform/apply-environment.sh
    - .gitlab/scripts/terraform/apply-environment.sh "$ENV"
  artifacts:
    paths:
      - ${TF_ROOT}/${ENV}/terraform_outputs.json
      - ${TF_ROOT}/${ENV}/terraform.tfstate.backup.*
      - ${TF_ROOT}/${ENV}/version-constraints.json
      - ${TF_ROOT}/${ENV}/deployment_metadata.json
      - ansible/inventory/${ENV}
    expire_in: 7 days
    when: always

# =============================================================================
# TEMPLATES SPÃ‰CIALISÃ‰S PAR ENVIRONNEMENT
# =============================================================================

.terraform_validate_dev:
  extends: 
    - .terraform_validate
    - .rules_dev
  variables:
    ENV: dev

.terraform_validate_prod:
  extends: 
    - .terraform_validate
    - .rules_prod
  variables:
    ENV: prod

.terraform_plan_dev:
  extends: 
    - .terraform_plan
    - .rules_dev
  variables:
    ENV: dev

.terraform_plan_prod:
  extends: 
    - .terraform_plan
    - .rules_prod
  variables:
    ENV: prod

.terraform_apply_dev:
  extends: 
    - .terraform_apply
    - .rules_manual_dev
  variables:
    ENV: dev
  # DÃ©pendances explicites avec vÃ©rification
  dependencies:
    - plan_dev
  needs:
    - job: plan_dev
      artifacts: true

.terraform_apply_prod:
  extends: 
    - .terraform_apply
    - .rules_manual_prod
  variables:
    ENV: prod
  environment:
    name: production
    action: start
  # DÃ©pendances explicites avec vÃ©rification
  dependencies:
    - plan_prod
  needs:
    - job: plan_prod
      artifacts: true

# =============================================================================
# TEMPLATES DE MAINTENANCE
# =============================================================================

.terraform_cleanup:
  extends: 
    - .terraform_base
    - .timeout_short
  script:
    - chmod +x .gitlab/scripts/terraform/cleanup-terraform.sh
    - .gitlab/scripts/terraform/cleanup-terraform.sh

# =============================================================================
# TEMPLATE DE RÃ‰CUPÃ‰RATION D'ERREUR
# =============================================================================

.terraform_recovery:
  extends: 
    - .terraform_base
    - .timeout_short
  variables:
    RECOVERY_MODE: "true"
  script:
    - echo "ðŸ”§ Mode rÃ©cupÃ©ration activÃ© pour l'environnement = $ENV"
    - chmod +x .gitlab/scripts/utils/diagnose-pipeline.sh
    - .gitlab/scripts/utils/diagnose-pipeline.sh "$ENV"
    - chmod +x .gitlab/scripts/terraform/cleanup-terraform.sh
    - .gitlab/scripts/terraform/cleanup-terraform.sh --recovery
  when: manual
  allow_failure: true