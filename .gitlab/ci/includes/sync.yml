# =============================================================================
# JOBS DE SYNCHRONISATION GITLAB CI/CD
# =============================================================================
# Description : Jobs pour la synchronisation GitHub, issues et autres
# Version     : 1.0.0
# =============================================================================

# Synchronisation du code vers GitHub
mirror_to_github:
  extends: .setup_ssh
  stage: sync
  image: alpine:latest
  timeout: 5m
  script:
    - echo "üîÑ Synchronisation vers GitHub..."
    - apk add --no-cache git
    
    # Configuration Git
    - git config --global user.email "ci@homelab.local"
    - git config --global user.name "GitLab CI"
    
    # Ajout du remote GitHub
    - |
      if ! git remote | grep -q "github"; then
        git remote add github git@github.com:${GITHUB_REPO:-Alb06/IaC}.git
      fi
      
    # Push avec gestion d'erreurs
    - |
      echo "üì§ Push vers GitHub..."
      max_retries=3
      retry_count=0
      
      while [ $retry_count -lt $max_retries ]; do
        if git push github HEAD:main --force; then
          echo "‚úÖ Synchronisation GitHub r√©ussie"
          break
        else
          retry_count=$((retry_count + 1))
          echo "‚ö†Ô∏è  Tentative $retry_count/$max_retries √©chou√©e"
          sleep 5
        fi
      done
      
      if [ $retry_count -eq $max_retries ]; then
        echo "‚ùå √âchec de la synchronisation GitHub"
        exit 1
      fi
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$FORCE_GITHUB_SYNC == "true"'
  allow_failure: true

# Synchronisation des issues GitLab vers GitHub
sync_issues_to_github:
  extends: .python_base
  stage: sync
  timeout: 10m
  before_script:
    - !reference [.python_base, before_script]
    - pip install requests python-dateutil
  script:
    - echo "üîÑ Synchronisation des issues GitLab ‚Üí GitHub..."
    
    # V√©rification des variables requises
    - |
      for var in GITLAB_TOKEN GITHUB_TOKEN GITLAB_PROJECT_ID GITHUB_REPO; do
        if [ -z "${!var}" ]; then
          echo "‚ùå Variable $var manquante"
          exit 1
        fi
      done
      
    # Ex√©cution du script de synchronisation
    - |
      if [ -f "scripts/ci-cd/sync_issues.py" ]; then
        python scripts/ci-cd/sync_issues.py
      else
        echo "‚ö†Ô∏è  Script de synchronisation non trouv√©"
        echo "Cr√©er scripts/ci-cd/sync_issues.py pour activer cette fonctionnalit√©"
      fi
  needs: []
  variables:
    GITLAB_API_URL: "https://gitlab.com/api/v4"
    GITHUB_API_URL: "https://api.github.com"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$FORCE_ISSUES_SYNC == "true"'
  allow_failure: true

# Template pour futures synchronisations
.sync_base:
  stage: sync
  timeout: 5m
  retry:
    max: 2
    when:
      - runner_system_failure
      - api_failure
      - stuck_or_timeout_failure
  allow_failure: true