# =============================================================================
# JOBS DE NETTOYAGE GITLAB CI/CD
# =============================================================================
# Description : Jobs pour le nettoyage et la maintenance du pipeline
# Version     : 1.0.0
# =============================================================================

# Nettoyage des ressources temporaires
cleanup:
  stage: cleanup
  image: alpine:latest
  timeout: 5m
  script:
    - echo "üßπ Nettoyage des ressources temporaires..."
    
    # Installation des outils n√©cessaires
    - apk add --no-cache find coreutils
    
    # Nettoyage des anciens artifacts Terraform
    - |
      echo "üìÅ Nettoyage des artifacts Terraform..."
      if [ -d "${TF_ROOT}" ]; then
        # Plans Terraform de plus de 7 jours
        find ${TF_ROOT} -name "tfplan" -type f -mtime +7 -delete 2>/dev/null || true
        find ${TF_ROOT} -name "tfplan.json" -type f -mtime +7 -delete 2>/dev/null || true
        
        # Backups de plus de 30 jours
        find ${TF_ROOT} -name "*.backup.*" -type f -mtime +30 -delete 2>/dev/null || true
        find ${TF_ROOT} -name "terraform.tfstate.backup.*" -type f -mtime +30 -delete 2>/dev/null || true
        
        # Fichiers de lock orphelins
        find ${TF_ROOT} -name ".terraform.lock.hcl" -type f -mtime +30 -delete 2>/dev/null || true
        
        echo "‚úÖ $(find ${TF_ROOT} -name "tfplan" -type f | wc -l) plans actifs conserv√©s"
      fi
      
    # Nettoyage des rapports de validation
    - |
      echo "üìä Nettoyage des rapports..."
      find . -name "version_validation_report.json" -type f -mtime +7 -delete 2>/dev/null || true
      find . -name "version-constraints.json" -type f -mtime +30 -delete 2>/dev/null || true
      
    # Nettoyage des logs temporaires
    - |
      echo "üìù Nettoyage des logs..."
      for log_dir in /tmp ansible/logs .gitlab/logs; do
        if [ -d "$log_dir" ]; then
          find "$log_dir" -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
        fi
      done
      
    # Statistiques de nettoyage
    - |
      echo "üìä R√©sum√© du nettoyage:"
      echo "- Espace disque lib√©r√©: $(du -sh ${TF_ROOT} 2>/dev/null | cut -f1 || echo 'N/A')"
      echo "- Date du nettoyage: $(date)"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$FORCE_CLEANUP == "true"'
  allow_failure: true

# Nettoyage du cache GitLab
cleanup_cache:
  stage: cleanup
  image: alpine:latest
  script:
    - echo "üóëÔ∏è Nettoyage du cache GitLab..."
    
    # Liste des cl√©s de cache √† nettoyer
    - |
      cache_keys=(
        "terraform-*-dev"
        "terraform-*-prod"
        "ansible-*"
        "python-*"
      )
      
      echo "üîç Cl√©s de cache √† traiter: ${cache_keys[*]}"
      echo "‚ÑπÔ∏è  Note: Le nettoyage du cache n√©cessite l'API GitLab"
  cache:
    policy: push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$FORCE_CACHE_CLEANUP == "true"'
      when: manual
  allow_failure: true

# Maintenance des environnements
cleanup_environments:
  stage: cleanup
  image: alpine:latest
  script:
    - echo "üåç Maintenance des environnements..."
    
    # Nettoyage des environnements de review apps (si applicable)
    - |
      echo "üìã Environnements actifs:"
      echo "- Development: ${CI_ENVIRONMENT_NAME:-N/A}"
      echo "- Production: Prot√©g√© - nettoyage manuel uniquement"
      
    # Placeholder pour futures op√©rations de maintenance
    - echo "‚ÑπÔ∏è  Ajoutez vos scripts de maintenance d'environnement ici"
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
      when: manual
  allow_failure: true

# Template pour jobs de maintenance programm√©e
.scheduled_maintenance:
  only:
    - schedules
  variables:
    MAINTENANCE_MODE: "true"