# Planification pour l'environnement dev (VERSION CORRIG√âE)
plan_dev:
  stage: plan
  image: alpine:latest
  timeout: 3m  
  extends: .install_terraform
  variables:
    ENV: dev
  script:
    - echo "üìã Planification Terraform pour $ENV avec contraintes centralis√©es..."
    - cd ${TF_ROOT}/${ENV}
    - terraform init
    
    # V√©rification des contraintes appliqu√©es
    - |
      echo "üîç V√©rification des contraintes Terraform appliqu√©es..."
      terraform version
      echo "Contraintes du fichier versions.tf:"
      cat versions.tf | grep -E "(required_version|version)"
    
    # R√©cup√©ration des variables depuis le module globals et planification
    - echo "üîç R√©cup√©ration des variables centralis√©es..."
    - |
      # CORRECTION: Gestion propre des exit codes terraform plan
      set +e  # D√©sactive l'arr√™t automatique sur erreur
      terraform plan -out=tfplan -detailed-exitcode
      plan_exit_code=$?
      set -e  # R√©active l'arr√™t automatique sur erreur
      
      echo "Terraform plan exit code: $plan_exit_code"
      
      case $plan_exit_code in
        0)
          echo "‚úÖ Aucun changement d√©tect√©"
          echo "PLAN_STATUS=no_changes" > ./plan_status.env
          plan_result="success"
          ;;
        1)
          echo "‚ùå Erreur lors de la planification"
          echo "PLAN_STATUS=error" > ./plan_status.env
          exit 1
          ;;
        2)
          echo "üìù Changements d√©tect√©s, plan g√©n√©r√©"
          echo "PLAN_STATUS=changes_detected" > ./plan_status.env
          plan_result="success"
          ;;
        *)
          echo "‚ùå Code de sortie inattendu: $plan_exit_code"
          echo "PLAN_STATUS=unknown_error" > ./plan_status.env
          exit 1
          ;;
      esac
      
      echo "Plan result: $plan_result"
      echo "Created plan_status.env with content:"
      cat ./plan_status.env
    
    # CORRECTION: Gestion de l'output pour √©viter SIGPIPE (exit code 141)
    - echo "üìä G√©n√©ration du r√©sum√© du plan..."
    - |
      # Limiter l'output pour √©viter les pipes cass√©s
      terraform show -no-color tfplan > plan_output.txt 2>&1 || true
      
      # Affichage du r√©sum√© (limit√©)
      echo "=== R√âSUM√â DU PLAN TERRAFORM (avec versions centralis√©es) ==="
      echo "Nombre de lignes du plan: $(wc -l < plan_output.txt)"
      
      # Afficher seulement le r√©sum√© des changements
      grep -E "(Plan:|No changes)" plan_output.txt || echo "Plan g√©n√©r√©"
      
      # Afficher les premi√®res ressources pour validation
      echo ""
      echo "=== APER√áU DES CHANGEMENTS ==="
      head -30 plan_output.txt
      echo ""
      echo "... (plan complet sauvegard√© dans plan_output.txt)"
    
    - echo "‚úÖ Planification $ENV termin√©e avec succ√®s"
    
  artifacts:
    paths:
      - ${TF_ROOT}/${ENV}/tfplan
      - ${TF_ROOT}/${ENV}/plan_status.env
      - ${TF_ROOT}/${ENV}/plan_output.txt
    expire_in: 1 week
    reports:
      dotenv: ${TF_ROOT}/${ENV}/plan_status.env
  
  dependencies:
    - validate_versions
    - validate
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
  # tags:
  #   - terraform

# Planification pour l'environnement prod (VERSION CORRIG√âE)
plan_prod:
  stage: plan
  image: alpine:latest
  timeout: 3m
  extends: .install_terraform
  variables:
    ENV: prod
  script:
    - echo "üìã Planification Terraform pour $ENV avec contraintes centralis√©es..."
    - cd ${TF_ROOT}/${ENV}
    - terraform init
    
    # Validation suppl√©mentaire pour la production
    - echo "üîê Validations de s√©curit√© production..."
    - |
      # V√©rification des variables critiques
      if [ -z "$SSH_PRIVATE_KEY" ]; then
        echo "‚ùå SSH_PRIVATE_KEY manquante pour la production"
        exit 1
      fi
      
      # V√©rification des contraintes appliqu√©es en production
      echo "üîç V√©rification des contraintes Terraform production..."
      terraform version
      echo "Contraintes du fichier versions.tf:"
      cat versions.tf | grep -E "(required_version|version)"
      
      # CORRECTION: Gestion propre des exit codes terraform plan
      set +e  # D√©sactive l'arr√™t automatique sur erreur
      terraform plan -out=tfplan -detailed-exitcode
      plan_exit_code=$?
      set -e  # R√©active l'arr√™t automatique sur erreur
      
      echo "Terraform plan exit code: $plan_exit_code"
      
      case $plan_exit_code in
        0)
          echo "‚úÖ Aucun changement d√©tect√© en production"
          echo "PLAN_STATUS=no_changes" > ./plan_status.env
          plan_result="success"
          ;;
        1)
          echo "‚ùå Erreur lors de la planification production"
          echo "PLAN_STATUS=error" > ./plan_status.env
          exit 1
          ;;
        2)
          echo "‚ö†Ô∏è  ATTENTION: Changements d√©tect√©s en PRODUCTION"
          echo "PLAN_STATUS=changes_detected" > ./plan_status.env
          echo "Plan d√©taill√© sera affich√© dans le r√©sum√© ci-dessous"
          plan_result="success"
          ;;
        *)
          echo "‚ùå Code de sortie inattendu: $plan_exit_code"
          echo "PLAN_STATUS=unknown_error" > ./plan_status.env
          exit 1
          ;;
      esac
      
      echo "Plan result: $plan_result"
      echo "Created plan_status.env with content:"
      cat ./plan_status.env
    
    # CORRECTION: Gestion de l'output pour √©viter SIGPIPE (exit code 141)
    - echo "üìä G√©n√©ration du r√©sum√© du plan production..."
    - |
      # Limiter l'output pour √©viter les pipes cass√©s
      terraform show -no-color tfplan > plan_output.txt 2>&1 || true
      
      # Affichage du r√©sum√© (limit√©)
      echo "=== R√âSUM√â DU PLAN TERRAFORM PRODUCTION (avec versions centralis√©es) ==="
      echo "Nombre de lignes du plan: $(wc -l < plan_output.txt)"
      
      # Afficher seulement le r√©sum√© des changements
      grep -E "(Plan:|No changes)" plan_output.txt || echo "Plan g√©n√©r√©"
      
      # Afficher les premi√®res ressources pour validation
      echo ""
      echo "=== APER√áU DES CHANGEMENTS PRODUCTION ==="
      head -30 plan_output.txt
      echo ""
      echo "... (plan complet sauvegard√© dans plan_output.txt)"
    
    - echo "‚úÖ Planification $ENV termin√©e avec succ√®s"
  
  artifacts:
    paths:
      - ${TF_ROOT}/${ENV}/tfplan
      - ${TF_ROOT}/${ENV}/plan_status.env
      - ${TF_ROOT}/${ENV}/plan_output.txt
    expire_in: 1 week
    reports:
      dotenv: ${TF_ROOT}/${ENV}/plan_status.env
  
  dependencies:
    - validate_versions
    - validate
  
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  # tags:
  #   - terraform
