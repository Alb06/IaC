# Application en environnement dev
apply_dev:
  stage: apply
  image: alpine:latest
  timeout: 3m  
  <<: *install_terraform
  variables:
    ENV: dev
  script:
    - echo "üöÄ Application Terraform pour $ENV avec contraintes centralis√©es..."
    - cd ${TF_ROOT}/${ENV}
    - terraform init
    
    # V√©rification de l'existence du plan
    - |
      if [ ! -f "tfplan" ]; then
        echo "‚ùå Fichier plan non trouv√©"
        exit 1
      fi
    
    # Application du plan
    - terraform apply -auto-approve tfplan
    
    # R√©cup√©ration des outputs pour validation
    - echo "üìä R√©cup√©ration des outputs..."
    - terraform output -json > terraform_outputs.json
    
    # üÜï Validation des contraintes appliqu√©es
    - |
      echo "üîç Validation des contraintes de versions appliqu√©es..."
      if command -v jq >/dev/null 2>&1; then
        apk add --no-cache jq
        terraform_constraints=$(terraform output -json terraform_constraints 2>/dev/null || echo "{}")
        echo "Contraintes appliqu√©es:"
        echo "$terraform_constraints" | jq '.' || echo "Contraintes non disponibles dans les outputs"
      fi
    
    # Validation des inventaires Ansible g√©n√©r√©s
    - echo "üîç Validation des inventaires Ansible..."
    - |
      inventory_file="../../../ansible/inventory/${ENV}"
      if [ -f "$inventory_file" ]; then
        echo "‚úÖ Inventaire g√©n√©r√©: $inventory_file"
        head -20 "$inventory_file"
      else
        echo "‚ùå Inventaire non g√©n√©r√©"
        exit 1
      fi
  
  artifacts:
    paths:
      - ${TF_ROOT}/${ENV}/terraform_outputs.json
      - ${TF_ROOT}/${ENV}/version-constraints.json
      - ansible/inventory/${ENV}
    expire_in: 1 day
  
  dependencies:
    - plan_dev
  
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
  # tags:
  #   - terraform

# Application en environnement prod (protection renforc√©e)
apply_prod:
  stage: apply
  image: alpine:latest
  timeout: 3m
  <<: *install_terraform
  variables:
    ENV: prod
  script:
    - echo "üöÄ Application Terraform pour PRODUCTION avec contraintes centralis√©es..."
    - echo "‚ö†Ô∏è  ATTENTION D√©ploiement en environnement de PRODUCTION"
    
    - cd ${TF_ROOT}/${ENV}
    - terraform init
    
    # V√©rifications de s√©curit√© renforc√©es
    - |
      echo "üîê V√©rifications de s√©curit√© production..."
      
      if [ ! -f "tfplan" ]; then
        echo "‚ùå Fichier plan non trouv√©"
        exit 1
      fi
      
      # V√©rification de la branche
      if [ "$CI_COMMIT_BRANCH" != "main" ]; then
        echo "‚ùå D√©ploiement production autoris√© uniquement depuis main"
        exit 1
      fi
      
      # V√©rification des contraintes de versions avant application
      echo "üîç V√©rification finale des contraintes Terraform..."
      terraform version
      cat versions.tf | grep -E "(required_version|version)"
      
      # V√©rification de l'auteur (optionnel)
      echo "üë§ D√©ploiement par: $GITLAB_USER_NAME ($GITLAB_USER_EMAIL)"
    
    # Sauvegarde avant application
    - echo "üíæ Sauvegarde de l'√©tat actuel..."
    - cp terraform.tfstate "terraform.tfstate.backup.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
    
    # Application du plan
    - terraform apply -auto-approve tfplan
    
    # Validation post-d√©ploiement
    - echo "‚úÖ Validation post-d√©ploiement..."
    - terraform output -json > terraform_outputs.json
    
    # üÜï Validation des contraintes en production
    - |
      echo "üîç Validation des contraintes production..."
      apk add --no-cache jq
      if [ -f "version-constraints.json" ]; then
        echo "üìÑ Contraintes production appliqu√©es:"
        cat version-constraints.json | jq '.production_specific // "Aucune sp√©cificit√© production"'
      fi
    
    # Test de connectivit√© (si possible)
    - |
      server_ip=$(terraform output -raw server_config | jq -r '.ip' 2>/dev/null || echo "")
      if [ ! -z "$server_ip" ]; then
        echo "üåê Test de connectivit√© vers $server_ip..."
        ping -c 3 "$server_ip" || echo "‚ö†Ô∏è  Serveur non accessible via ping"
      fi
  
  artifacts:
    paths:
      - ${TF_ROOT}/${ENV}/terraform_outputs.json
      - ${TF_ROOT}/${ENV}/terraform.tfstate.backup.*
      - ${TF_ROOT}/${ENV}/version-constraints.json
      - ansible/inventory/${ENV}
    expire_in: 7 days
  
  dependencies:
    - plan_prod
  
  environment:
    name: production
    action: start
  
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false
  # tags:
  #   - terraform
